public class Matrix 
{
    private final int M;             // number of rows
    private final int N;             // number of columns
    private final double[][] data;   // M-by-N array
    
    public Matrix(int M, int N)
    {
        this.M = M;
        this.N = N;
        data = new double[M][N];
    }
// create matrix based on 2d array
public Matrix(double[][] data)
{
    M = data.length;
    N = data[0].length;
    this.data = new double[M][N];
    for (int i = 0; i < M; i++)
        for (int j = 0; j < N; j++)
                this.data[i][j] = data[i][j];
}

// copy constructor
private Matrix(Matrix A) { this(A.data); }

// create and return a random M-by-N matrix with values between 0 and 1
public static Matrix random(int M, int N)
{
    Matrix A = new Matrix(M, N);
    for (int i = 0; i < M; i++)
        for (int j = 0; j < N; j++)
            A.data[i][j] = Math.random();
    return A;
}

// create and return the N-by-N identity matrix
public static Matrix identity(int N) 
{
    Matrix I = new Matrix(N, N);
    for (int i = 0; i < N; i++)
        I.data[i][i] = 1;
    return I;
}

// swap rows i and j
void swap(int i, int j) 
{
    double[] temp = data[i];
    data[i] = data[j];
    data[j] = temp;
}

// create and return the transpose of the invoking matrix
public Matrix transpose()
{
    Matrix A = new Matrix(N, M);
    for (int i = 0; i < M; i++)
        for (int j = 0; j < N; j++)
            A.data[j][i] = this.data[i][j];
    return A;
}

// return C = A + B
public Matrix plus(Matrix B)
{
    Matrix A = this;
    if (B.M != A.M || B.N != A.N) throw new RuntimeException("Illegal matrix dimensions.");
    Matrix C = new Matrix(M, N);
    for (int i = 0; i < M; i++)
        for (int j = 0; j < N; j++)
            C.data[i][j] = A.data[i][j] + B.data[i][j];
    return C;
}

// return C = A * B
public Matrix times(Matrix B)
{
    Matrix A = this;
    if (A.N != B.M) throw new RuntimeException("Illegal matrix dimensions.");
    Matrix C = new Matrix(A.M, B.N);
    for (int i = 0; i < C.M; i++)
        for (int j = 0; j < C.N; j++)
            for (int k = 0; k < A.N; k++)
                C.data[i][j] += (A.data[i][k] * B.data[k][j]);
    return C;
}

// print matrix to standard output
public void show()
{
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++) 
            System.out.printf("%9.4f ", data[i][j]);
            System.out.println();
    }
}

		public static void main(String[] args)
		{
        // a. Membuat dan menampilkan Matrix random A
		double[][] d = { { 1, 2, 3 }, { 4, 5, 6 }, { 9, 1, 3} };
		Matrix D = new Matrix(d);
		D.show();
		System.out.println("\n");

        // a. Membuat dan menampilkan Matrix random A
        System.out.println("a. Matrix A Random M x N : ");
        Matrix A = Matrix.random(2, 2);
        A.show();
        System.out.println("\n");

        // b. Membuat dan menampilkan Matrix B yang merupakan Transpose dari Matrix A 
		A.swap(1, 1);
        System.out.println("b. Transpose A dengan nama B : ");
        Matrix B = A.transpose();
        B.show();
        System.out.println("\n");

		// c. Matrix identitas (C)
        System.out.println("c. Matrix Identitas C : ");
        Matrix C = Matrix.identity(3);
        C.show(); 
        System.out.println("\n");

        // d. Menjumlahkan dan menampilkan penambahan Matrix A + B
        System.out.println("d. Matrix A + B : ");
        A.plus(B).show();
        System.out.println("\n");

        // e. Menjumlahkan dan menampilkan perkalian Matrix B x A
        System.out.println("e. Matrix B x A : ");
        B.times(A).show();
	}
}
